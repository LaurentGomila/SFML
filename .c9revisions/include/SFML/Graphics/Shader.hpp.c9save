{"ts":1369223493969,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"////////////////////////////////////////////////////////////\r\n//\r\n// SFML - Simple and Fast Multimedia Library\r\n// Copyright (C) 2007-2013 Laurent Gomila (laurent.gom@gmail.com)\r\n//\r\n// This software is provided 'as-is', without any express or implied warranty.\r\n// In no event will the authors be held liable for any damages arising from the use of this software.\r\n//\r\n// Permission is granted to anyone to use this software for any purpose,\r\n// including commercial applications, and to alter it and redistribute it freely,\r\n// subject to the following restrictions:\r\n//\r\n// 1. The origin of this software must not be misrepresented;\r\n//    you must not claim that you wrote the original software.\r\n//    If you use this software in a product, an acknowledgment\r\n//    in the product documentation would be appreciated but is not required.\r\n//\r\n// 2. Altered source versions must be plainly marked as such,\r\n//    and must not be misrepresented as being the original software.\r\n//\r\n// 3. This notice may not be removed or altered from any source distribution.\r\n//\r\n////////////////////////////////////////////////////////////\r\n\r\n#ifndef SFML_SHADER_HPP\r\n#define SFML_SHADER_HPP\r\n\r\n////////////////////////////////////////////////////////////\r\n// Headers\r\n////////////////////////////////////////////////////////////\r\n#include <SFML/Graphics/Export.hpp>\r\n#include <SFML/Graphics/Transform.hpp>\r\n#include <SFML/Graphics/Color.hpp>\r\n#include <SFML/Window/GlResource.hpp>\r\n#include <SFML/System/NonCopyable.hpp>\r\n#include <SFML/System/Vector2.hpp>\r\n#include <SFML/System/Vector3.hpp>\r\n#include <map>\r\n#include <string>\r\n\r\n\r\nnamespace sf\r\n{\r\nclass InputStream;\r\nclass Texture;\r\n\r\n////////////////////////////////////////////////////////////\r\n/// \\brief Shader class (vertex and fragment)\r\n///\r\n////////////////////////////////////////////////////////////\r\nclass SFML_GRAPHICS_API Shader : GlResource, NonCopyable\r\n{\r\npublic :\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Types of shaders\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    enum Type\r\n    {\r\n        Vertex,  ///< Vertex shader\r\n        Fragment ///< Fragment (pixel) shader\r\n    };\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Special type/value that can be passed to setParameter,\r\n    ///        and that represents the texture of the object being drawn\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    struct CurrentTextureType {};\r\n    static CurrentTextureType CurrentTexture;\r\n\r\npublic :\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Default constructor\r\n    ///\r\n    /// This constructor creates an invalid shader.\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    Shader();\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Destructor\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    ~Shader();\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Load either the vertex or fragment shader from a file\r\n    ///\r\n    /// This function loads a single shader, either vertex or\r\n    /// fragment, identified by the second argument.\r\n    /// The source must be a text file containing a valid\r\n    /// shader in GLSL language. GLSL is a C-like language\r\n    /// dedicated to OpenGL shaders; you'll probably need to\r\n    /// read a good documentation for it before writing your\r\n    /// own shaders.\r\n    ///\r\n    /// \\param filename Path of the vertex or fragment shader file to load\r\n    /// \\param type     Type of shader (vertex or fragment)\r\n    ///\r\n    /// \\return True if loading succeeded, false if it failed\r\n    ///\r\n    /// \\see loadFromMemory, loadFromStream\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    bool loadFromFile(const std::string& filename, Type type);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Load both the vertex and fragment shaders from files\r\n    ///\r\n    /// This function loads both the vertex and the fragment\r\n    /// shaders. If one of them fails to load, the shader is left\r\n    /// empty (the valid shader is unloaded).\r\n    /// The sources must be text files containing valid shaders\r\n    /// in GLSL language. GLSL is a C-like language dedicated to\r\n    /// OpenGL shaders; you'll probably need to read a good documentation\r\n    /// for it before writing your own shaders.\r\n    ///\r\n    /// \\param vertexShaderFilename   Path of the vertex shader file to load\r\n    /// \\param fragmentShaderFilename Path of the fragment shader file to load\r\n    ///\r\n    /// \\return True if loading succeeded, false if it failed\r\n    ///\r\n    /// \\see loadFromMemory, loadFromStream\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    bool loadFromFile(const std::string& vertexShaderFilename, const std::string& fragmentShaderFilename);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Load either the vertex or fragment shader from a source code in memory\r\n    ///\r\n    /// This function loads a single shader, either vertex or\r\n    /// fragment, identified by the second argument.\r\n    /// The source code must be a valid shader in GLSL language.\r\n    /// GLSL is a C-like language dedicated to OpenGL shaders;\r\n    /// you'll probably need to read a good documentation for\r\n    /// it before writing your own shaders.\r\n    ///\r\n    /// \\param shader String containing the source code of the shader\r\n    /// \\param type   Type of shader (vertex or fragment)\r\n    ///\r\n    /// \\return True if loading succeeded, false if it failed\r\n    ///\r\n    /// \\see loadFromFile, loadFromStream\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    bool loadFromMemory(const std::string& shader, Type type);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Load both the vertex and fragment shaders from source codes in memory\r\n    ///\r\n    /// This function loads both the vertex and the fragment\r\n    /// shaders. If one of them fails to load, the shader is left\r\n    /// empty (the valid shader is unloaded).\r\n    /// The sources must be valid shaders in GLSL language. GLSL is\r\n    /// a C-like language dedicated to OpenGL shaders; you'll\r\n    /// probably need to read a good documentation for it before\r\n    /// writing your own shaders.\r\n    ///\r\n    /// \\param vertexShader   String containing the source code of the vertex shader\r\n    /// \\param fragmentShader String containing the source code of the fragment shader\r\n    ///\r\n    /// \\return True if loading succeeded, false if it failed\r\n    ///\r\n    /// \\see loadFromFile, loadFromStream\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    bool loadFromMemory(const std::string& vertexShader, const std::string& fragmentShader);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Load either the vertex or fragment shader from a custom stream\r\n    ///\r\n    /// This function loads a single shader, either vertex or\r\n    /// fragment, identified by the second argument.\r\n    /// The source code must be a valid shader in GLSL language.\r\n    /// GLSL is a C-like language dedicated to OpenGL shaders;\r\n    /// you'll probably need to read a good documentation for it\r\n    /// before writing your own shaders.\r\n    ///\r\n    /// \\param stream Source stream to read from\r\n    /// \\param type   Type of shader (vertex or fragment)\r\n    ///\r\n    /// \\return True if loading succeeded, false if it failed\r\n    ///\r\n    /// \\see loadFromFile, loadFromMemory\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    bool loadFromStream(InputStream& stream, Type type);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Load both the vertex and fragment shaders from custom streams\r\n    ///\r\n    /// This function loads both the vertex and the fragment\r\n    /// shaders. If one of them fails to load, the shader is left\r\n    /// empty (the valid shader is unloaded).\r\n    /// The source codes must be valid shaders in GLSL language.\r\n    /// GLSL is a C-like language dedicated to OpenGL shaders;\r\n    /// you'll probably need to read a good documentation for\r\n    /// it before writing your own shaders.\r\n    ///\r\n    /// \\param vertexShaderStream   Source stream to read the vertex shader from\r\n    /// \\param fragmentShaderStream Source stream to read the fragment shader from\r\n    ///\r\n    /// \\return True if loading succeeded, false if it failed\r\n    ///\r\n    /// \\see loadFromFile, loadFromMemory\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    bool loadFromStream(InputStream& vertexShaderStream, InputStream& fragmentShaderStream);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change an integer parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be an integer\r\n    /// (intt GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform int myparam; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"myparam\", 5);\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name Name of the parameter in the shader\r\n    /// \\param x    Value to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, int x);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a float parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a float\r\n    /// (float GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform float myparam; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"myparam\", 5.2f);\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name Name of the parameter in the shader\r\n    /// \\param x    Value to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, float x);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a 2-components vector parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a 2x1 vector\r\n    /// (vec2 GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform vec2 myparam; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"myparam\", 5.2f, 6.0f);\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name Name of the parameter in the shader\r\n    /// \\param x    First component of the value to assign\r\n    /// \\param y    Second component of the value to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, float x, float y);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a 3-components vector parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a 3x1 vector\r\n    /// (vec3 GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform vec3 myparam; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"myparam\", 5.2f, 6.0f, -8.1f);\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name Name of the parameter in the shader\r\n    /// \\param x    First component of the value to assign\r\n    /// \\param y    Second component of the value to assign\r\n    /// \\param z    Third component of the value to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, float x, float y, float z);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a 4-components vector parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a 4x1 vector\r\n    /// (vec4 GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform vec4 myparam; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"myparam\", 5.2f, 6.0f, -8.1f, 0.4f);\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name Name of the parameter in the shader\r\n    /// \\param x    First component of the value to assign\r\n    /// \\param y    Second component of the value to assign\r\n    /// \\param z    Third component of the value to assign\r\n    /// \\param w    Fourth component of the value to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, float x, float y, float z, float w);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a 2-components vector parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a 2x1 vector\r\n    /// (vec2 GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform vec2 myparam; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"myparam\", sf::Vector2f(5.2f, 6.0f));\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name   Name of the parameter in the shader\r\n    /// \\param vector Vector to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, const Vector2f& vector);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a 3-components vector parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a 3x1 vector\r\n    /// (vec3 GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform vec3 myparam; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"myparam\", sf::Vector3f(5.2f, 6.0f, -8.1f));\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name   Name of the parameter in the shader\r\n    /// \\param vector Vector to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, const Vector3f& vector);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a color parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a 4x1 vector\r\n    /// (vec4 GLSL type).\r\n    ///\r\n    /// It is important to note that the components of the color are\r\n    /// normalized before being passed to the shader. Therefore,\r\n    /// they are converted from range [0 .. 255] to range [0 .. 1].\r\n    /// For example, a sf::Color(255, 125, 0, 255) will be transformed\r\n    /// to a vec4(1.0, 0.5, 0.0, 1.0) in the shader.\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform vec4 color; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"color\", sf::Color(255, 128, 0, 255));\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name  Name of the parameter in the shader\r\n    /// \\param color Color to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, const Color& color);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a matrix parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a 4x4 matrix\r\n    /// (mat4 GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform mat4 matrix; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// sf::Transform transform;\r\n    /// transform.translate(5, 10);\r\n    /// shader.setParameter(\"matrix\", transform);\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name      Name of the parameter in the shader\r\n    /// \\param transform Transform to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, const sf::Transform& transform);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a texture parameter of the shader\r\n    ///\r\n    /// \\a name is the name of the variable to change in the shader.\r\n    /// The corresponding parameter in the shader must be a 2D texture\r\n    /// (sampler2D GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform sampler2D the_texture; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// sf::Texture texture;\r\n    /// ...\r\n    /// shader.setParameter(\"the_texture\", texture);\r\n    /// \\endcode\r\n    /// It is important to note that \\a texture must remain alive as long\r\n    /// as the shader uses it, no copy is made internally.\r\n    ///\r\n    /// To use the texture of the object being draw, which cannot be\r\n    /// known in advance, you can pass the special value\r\n    /// sf::Shader::CurrentTexture:\r\n    /// \\code\r\n    /// shader.setParameter(\"the_texture\", sf::Shader::CurrentTexture).\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name    Name of the texture in the shader\r\n    /// \\param texture Texture to assign\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, const Texture& texture);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Change a texture parameter of the shader\r\n    ///\r\n    /// This overload maps a shader texture variable to the\r\n    /// texture of the object being drawn, which cannot be\r\n    /// known in advance. The second argument must be\r\n    /// sf::Shader::CurrentTexture.\r\n    /// The corresponding parameter in the shader must be a 2D texture\r\n    /// (sampler2D GLSL type).\r\n    ///\r\n    /// Example:\r\n    /// \\code\r\n    /// uniform sampler2D current; // this is the variable in the shader\r\n    /// \\endcode\r\n    /// \\code\r\n    /// shader.setParameter(\"current\", sf::Shader::CurrentTexture);\r\n    /// \\endcode\r\n    ///\r\n    /// \\param name Name of the texture in the shader\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void setParameter(const std::string& name, CurrentTextureType);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Bind a shader for rendering\r\n    ///\r\n    /// This function is not part of the graphics API, it mustn't be\r\n    /// used when drawing SFML entities. It must be used only if you\r\n    /// mix sf::Shader with OpenGL code.\r\n    ///\r\n    /// \\code\r\n    /// sf::Shader s1, s2;\r\n    /// ...\r\n    /// sf::Shader::bind(&s1);\r\n    /// // draw OpenGL stuff that use s1...\r\n    /// sf::Shader::bind(&s2);\r\n    /// // draw OpenGL stuff that use s2...\r\n    /// sf::Shader::bind(NULL);\r\n    /// // draw OpenGL stuff that use no shader...\r\n    /// \\endcode\r\n    ///\r\n    /// \\param shader Shader to bind, can be null to use no shader\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    static void bind(const Shader* shader);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Tell whether or not the system supports shaders\r\n    ///\r\n    /// This function should always be called before using\r\n    /// the shader features. If it returns false, then\r\n    /// any attempt to use sf::Shader will fail.\r\n    ///\r\n    /// \\return True if shaders are supported, false otherwise\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    static bool isAvailable();\r\n\r\nprivate :\r\n    int getParamLocation(const std::string& name);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Compile the shader(s) and create the program\r\n    ///\r\n    /// If one of the arguments is NULL, the corresponding shader\r\n    /// is not created.\r\n    ///\r\n    /// \\param vertexShaderCode   Source code of the vertex shader\r\n    /// \\param fragmentShaderCode Source code of the fragment shader\r\n    ///\r\n    /// \\return True on success, false if any error happened\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    bool compile(const char* vertexShaderCode, const char* fragmentShaderCode);\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /// \\brief Bind all the textures used by the shader\r\n    ///\r\n    /// This function each texture to a different unit, and\r\n    /// updates the corresponding variables in the shader accordingly.\r\n    ///\r\n    ////////////////////////////////////////////////////////////\r\n    void bindTextures() const;\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    // Types\r\n    ////////////////////////////////////////////////////////////\r\n    typedef std::map<int, const Texture*> TextureTable;\r\n    typedef std::map<std::string, int> ParameterCache;\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    // Member data\r\n    ////////////////////////////////////////////////////////////\r\n    unsigned int   m_shaderProgram;  ///< OpenGL identifier for the program\r\n    int            m_currentTexture; ///< Location of the current texture in the shader\r\n    TextureTable   m_textures;       ///< Texture variables in the shader, mapped to their location\r\n    ParameterCache m_params;         ///< Uniforms in the shader, mapped to their location\r\n};\r\n\r\n} // namespace sf\r\n\r\n\r\n#endif // SFML_SHADER_HPP\r\n\r\n\r\n////////////////////////////////////////////////////////////\r\n/// \\class sf::Shader\r\n/// \\ingroup graphics\r\n///\r\n/// Shaders are programs written using a specific language,\r\n/// executed directly by the graphics card and allowing\r\n/// to apply real-time operations to the rendered entities.\r\n///\r\n/// There are two kinds of shaders:\r\n/// \\li Vertex shaders, that process vertices\r\n/// \\li Fragment (pixel) shaders, that process pixels\r\n///\r\n/// A sf::Shader can be composed of either a vertex shader\r\n/// alone, a fragment shader alone, or both combined\r\n/// (see the variants of the load functions).\r\n///\r\n/// Shaders are written in GLSL, which is a C-like\r\n/// language dedicated to OpenGL shaders. You'll probably\r\n/// need to learn its basics before writing your own shaders\r\n/// for SFML.\r\n///\r\n/// Like any C/C++ program, a shader has its own variables\r\n/// that you can set from your C++ application. sf::Shader\r\n/// handles 5 different types of variables:\r\n/// \\li floats\r\n/// \\li vectors (2, 3 or 4 components)\r\n/// \\li colors\r\n/// \\li textures\r\n/// \\li transforms (matrices)\r\n///\r\n/// The value of the variables can be changed at any time\r\n/// with the various overloads of the setParameter function:\r\n/// \\code\r\n/// shader.setParameter(\"offset\", 2.f);\r\n/// shader.setParameter(\"point\", 0.5f, 0.8f, 0.3f);\r\n/// shader.setParameter(\"color\", sf::Color(128, 50, 255));\r\n/// shader.setParameter(\"matrix\", transform); // transform is a sf::Transform\r\n/// shader.setParameter(\"overlay\", texture); // texture is a sf::Texture\r\n/// shader.setParameter(\"texture\", sf::Shader::CurrentTexture);\r\n/// \\endcode\r\n///\r\n/// The special Shader::CurrentTexture argument maps the\r\n/// given texture variable to the current texture of the\r\n/// object being drawn (which cannot be known in advance).\r\n///\r\n/// To apply a shader to a drawable, you must pass it as an\r\n/// additional parameter to the Draw function:\r\n/// \\code\r\n/// window.draw(sprite, &shader);\r\n/// \\endcode\r\n///\r\n/// ... which is in fact just a shortcut for this:\r\n/// \\code\r\n/// sf::RenderStates states;\r\n/// states.shader = &shader;\r\n/// window.draw(sprite, states);\r\n/// \\endcode\r\n///\r\n/// In the code above we pass a pointer to the shader, because it may\r\n/// be null (which means \"no shader\").\r\n///\r\n/// Shaders can be used on any drawable, but some combinations are\r\n/// not interesting. For example, using a vertex shader on a sf::Sprite\r\n/// is limited because there are only 4 vertices, the sprite would\r\n/// have to be subdivided in order to apply wave effects.\r\n/// Another bad example is a fragment shader with sf::Text: the texture\r\n/// of the text is not the actual text that you see on screen, it is\r\n/// a big texture containing all the characters of the font in an\r\n/// arbitrary order; thus, texture lookups on pixels other than the\r\n/// current one may not give you the expected result.\r\n///\r\n/// Shaders can also be used to apply global post-effects to the\r\n/// current contents of the target (like the old sf::PostFx class\r\n/// in SFML 1). This can be done in two different ways:\r\n/// \\li draw everything to a sf::RenderTexture, then draw it to\r\n///     the main target using the shader\r\n/// \\li draw everything directly to the main target, then use\r\n///     sf::Texture::update(Window&) to copy its contents to a texture\r\n///     and draw it to the main target using the shader\r\n///\r\n/// The first technique is more optimized because it doesn't involve\r\n/// retrieving the target's pixels to system memory, but the\r\n/// second one doesn't impact the rendering process and can be\r\n/// easily inserted anywhere without impacting all the code.\r\n///\r\n/// Like sf::Texture that can be used as a raw OpenGL texture,\r\n/// sf::Shader can also be used directly as a raw shader for\r\n/// custom OpenGL geometry.\r\n/// \\code\r\n/// sf::Shader::bind(&shader);\r\n/// ... render OpenGL geometry ...\r\n/// sf::Shader::bind(NULL);\r\n/// \\endcode\r\n///\r\n////////////////////////////////////////////////////////////\r\n"]],"start1":0,"start2":0,"length1":0,"length2":26093}]],"length":26093}
