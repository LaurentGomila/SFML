name: CI

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: environment-${{github.ref}}
  cancel-in-progress: true

env:
  DISPLAY: ":99" # Display number to use for the X server
  GALLIUM_DRIVER: llvmpipe # Use Mesa 3D software OpenGL renderer
  CCACHE_NOHASHDIR: true # Tell ccache not to care about embedded directory information

jobs:
  build:
    name: ${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows VS2019 x86,     os: windows-2019 }
        - { name: Windows VS2019 x64,     os: windows-2019 }
        - { name: Windows VS2022 x86,     os: windows-2022 }
        - { name: Windows VS2022 x64,     os: windows-2022 }
        - { name: Windows VS2022 ClangCL, os: windows-2022 }
        - { name: Windows LLVM Clang,     os: windows-2022 }
        - { name: Windows MinGW,          os: windows-2022 }
        - { name: Linux GCC,              os: ubuntu-22.04 }
        - { name: Linux Clang,            os: ubuntu-22.04 }
        - { name: Linux Intel oneAPI,     os: ubuntu-22.04 }
        - { name: macOS,                  os: macos-12, }
        - { name: macOS Xcode,            os: macos-12, generator: Xcode }
        - { name: iOS,                    os: macos-12 }
        - { name: iOS Xcode,              os: macos-12, generator: Xcode }
        config:
        - { name: Shared }
        - { name: Static }
        type:
        - { name: Release }
        - { name: Debug }

        include:
        - platform: { name: Windows VS2022, os: windows-2022 }
          config: { name: Unity Shared }
          type: { name: Release }
        - platform: { name: Windows VS2022, os: windows-2022 }
          config: { name: Unity Shared }
          type: { name: Debug }
        - platform: { name: Windows VS2022, os: windows-2022 }
          config: { name: OpenGL ES Shared }
          type: { name: Release }
        - platform: { name: Windows VS2022, os: windows-2022 }
          config: { name: OpenGL ES Shared }
          type: { name: Debug }
        - platform: { name: Windows MinGW, os: windows-2022 }
          config: { name: Static Standard Libraries }
        - platform: { name: macOS, os: macos-12 }
          config: { name: Frameworks Shared }
        - platform: { name: macOS, os: macos-12 }
          config: { name: Shared System Deps }
        - platform: { name: Android, os: ubuntu-22.04 }
          config: { name: x86 }
        - platform: { name: Android, os: ubuntu-22.04 }
          config: { name: armeabi-v7a }
        - platform: { name: Android, os: ubuntu-22.04 }
          config: { name: arm64-v8a }
        - platform: { name: Android, os: ubuntu-22.04 }
          config: { name: x86_64 }
        - platform: { name: Linux GCC DRM, os: ubuntu-22.04 }
          config: { name: Shared }
        - platform: { name: Linux GCC DRM, os: ubuntu-22.04 }
          config: { name: Static }

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set Visual Studio Architecture
      if: contains(matrix.platform.name, 'Windows VS')
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ contains(matrix.platform.name, 'x86') && 'x86' || 'x64' }}

    - name: Set Compiler
      shell: bash
      run: |
        if [[ "${{ matrix.platform.name }}" == *"ClangCL"* ]]; then
          INSTALLATION_PATH=$(vswhere -latest -requires Microsoft.VisualStudio.Component.VC.Llvm.Clang -property installationPath)
          CLANGCL_PATH="${INSTALLATION_PATH//\\//}/VC/Tools/Llvm/x64/bin/clang-cl.exe"
          echo "CC=\"$CLANGCL_PATH\"" >> $GITHUB_ENV
          echo "CXX=\"$CLANGCL_PATH\"" >> $GITHUB_ENV
        elif [[ "${{ matrix.platform.name }}" == *"Clang"* ]]; then
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        elif [[ "${{ matrix.platform.name }}" == *"MinGW"* ]]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        elif [[ "${{ matrix.platform.name }}" == *"GCC"* ]]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        elif [[ "${{ matrix.platform.name }}" == *"Intel"* ]]; then
          echo "CC=icx" >> $GITHUB_ENV
          echo "CXX=icpx" >> $GITHUB_ENV
        fi

    - name: Get Latest CMake and Ninja
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: latest
        ninjaVersion: latest

    - name: Remove Broken Pre-Installed ccache
      if: runner.os == 'Windows'
      shell: bash
      run: |
        if [ -x "$(command -v ccache)" ]; then rm $(which ccache); fi

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2.10
      with:
        verbose: 2
        key: ${{ matrix.platform.name }}-${{ matrix.config.name }}-${{ matrix.type.name }}

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      uses: awalsh128/cache-apt-pkgs-action@15d0235a4147963374ec3a9334d73adf0cb9eabc
      with:
        packages: xorg-dev libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev xvfb fluxbox
        version: 1.0
        execute_install_scripts: true

    - name: Cache Android Components
      if: matrix.platform.name == 'Android'
      id: android-cache
      uses: actions/cache@v3
      with:
        path: |
          android-ndk-r23b
        key: android-ndk-r23b

    - name: Install Android Components
      if: matrix.platform.name == 'Android' && steps.android-cache.outputs.cache-hit != 'true'
      run: |
        wget -nv https://dl.google.com/android/repository/android-ndk-r23b-linux.zip -P $GITHUB_WORKSPACE
        unzip -qq -d $GITHUB_WORKSPACE android-ndk-r23b-linux.zip

    - name: Setup Android Build Environment
      if: matrix.platform.name == 'Android'
      shell: bash
      run: |
        echo "CMAKE_ANDROID_NDK_SPEC=-DCMAKE_ANDROID_NDK=$GITHUB_WORKSPACE/android-ndk-r23b" >> $GITHUB_ENV
        echo "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION_SPEC=-DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang" >> $GITHUB_ENV
        echo "CMAKE_TOOLCHAIN_FILE_SPEC=-DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/android-ndk-r23b/build/cmake/android.toolchain.cmake" >> $GITHUB_ENV
        echo "CMAKE_ANDROID_STL_TYPE_SPEC=-DCMAKE_ANDROID_STL_TYPE=c++_shared" >> $GITHUB_ENV
        echo "CMAKE_ANDROID_API_SPEC=-DCMAKE_ANDROID_API=26" >> $GITHUB_ENV
        echo "ANDROID_PLATFORM_SPEC=-DANDROID_PLATFORM=26" >> $GITHUB_ENV

    - name: Install Linux Tools
      if: matrix.type.name == 'Debug' && runner.os == 'Linux'
      run: |
        CLANG_VERSION=$(clang++ --version | sed -n 's/.*version \([0-9]\+\)\..*/\1/p')
        echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
        sudo apt-get install gcovr ${{ matrix.platform.name == 'Linux Clang' && 'llvm-$CLANG_VERSION' || '' }}

    - name: Cache Intel oneAPI
      if: matrix.platform.name == 'Linux Intel oneAPI'
      id: intel-oneapi-cache
      uses: actions/cache@v3
      with:
        path: |
          /opt/intel
        key: intel-oneapi-${{ matrix.platform.os }}

    - name: Install Intel oneAPI
      if: matrix.platform.name == 'Linux Intel oneAPI' && steps.intel-oneapi-cache.outputs.cache-hit != 'true'
      run: |
        wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \
          | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        sudo apt-get install intel-oneapi-compiler-dpcpp-cpp

    - name: Set Intel oneAPI Environment Variables
      if: matrix.platform.name == 'Linux Intel oneAPI'
      run: |
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Install macOS Tools
      if: runner.os == 'macOS'
      run: |
        # Do not run updates until GitHub has fixed all the issues: https://github.com/orgs/Homebrew/discussions/4612
        # brew update
        brew install gcovr ninja || true

    - name: Cache OpenCppCoverage
      if: matrix.type.name == 'Debug' && runner.os == 'Windows'
      id: opencppcoverage-cache
      uses: actions/cache@v3
      with:
        path: |
          C:\Program Files\OpenCppCoverage
        key: opencppcoverage

    - name: Install OpenCppCoverage
      uses: nick-fields/retry@v2
      if: matrix.type.name == 'Debug' && runner.os == 'Windows' && steps.opencppcoverage-cache.outputs.cache-hit != 'true'
      with:
        max_attempts: 10
        timeout_minutes: 3
        command: |
          choco install OpenCppCoverage -y

    - name: Add OpenCppCoverage to PATH
      if: matrix.type.name == 'Debug' && runner.os == 'Windows'
      run: |
        echo "C:\Program Files\OpenCppCoverage" >> $env:GITHUB_PATH

    - name: Cache FetchContent
      uses: actions/cache@v3
      with:
        path: |
          build/_deps/*-src
        key: fetch-content-src

    - name: Cache Mesa 3D
      if: runner.os == 'Windows'
      uses: actions/cache@v3
      with:
        path: |
          build/mesa3d-23.0.0-release-msvc/x86
          build/mesa3d-23.0.0-release-msvc/x64
        key: mesa3d-23.0.0-release-msvc

    - name: Set CMake Arguments
      shell: bash
      run: >
        echo "CMAKE_ARGS=
        ${{ (matrix.platform.generator != '') && format('{0}{1}', '-G', matrix.platform.generator) || '-GNinja' }}
        -DCMAKE_VERBOSE_MAKEFILE=ON
        -DCMAKE_BUILD_TYPE=${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }}
        -DSFML_ENABLE_COVERAGE=${{ matrix.type.name == 'Debug' && 'TRUE' || 'FALSE' }}
        -DSFML_USE_MESA3D=TRUE
        ${{ env.CMAKE_ANDROID_NDK_SPEC }}
        ${{ env.CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION_SPEC }}
        ${{ env.CMAKE_TOOLCHAIN_FILE_SPEC }}
        ${{ env.CMAKE_ANDROID_STL_TYPE_SPEC }}
        ${{ env.CMAKE_ANDROID_API_SPEC }}
        ${{ env.ANDROID_PLATFORM_SPEC }}
        ${{ contains(matrix.platform.name, 'DRM')                     && '-DSFML_USE_DRM=TRUE'                                             || '' }}
        ${{ contains(matrix.platform.name, 'DRM')                     && '-DSFML_RUN_DISPLAY_TESTS=OFF'                                    || '' }}
        ${{ contains(matrix.platform.name, 'Android')                 && format('{0}{1}', '-DCMAKE_ANDROID_ARCH_ABI=', matrix.config.name) || '' }}
        ${{ contains(matrix.platform.name, 'Android')                 && '-DCMAKE_SYSTEM_NAME=Android'                                     || '' }}
        ${{ contains(matrix.platform.name, 'Android')                 && '-DSFML_BUILD_TEST_SUITE=FALSE'                                   || '' }}
        ${{ contains(matrix.platform.name, 'iOS')                     && '-DCMAKE_SYSTEM_NAME=iOS'                                         || '' }}
        ${{ (matrix.platform.name == 'iOS')                           && '-DCMAKE_OSX_ARCHITECTURES=arm64'                                 || '' }}
        ${{ (matrix.platform.name == 'iOS Xcode')                     && '-DCMAKE_XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED=NO'                 || '' }}
        ${{ contains(matrix.config.name, 'Unity')                     && '-DCMAKE_UNITY_BUILD=ON'                                          || '' }}
        ${{ contains(matrix.config.name, 'OpenGL ES')                 && '-DSFML_OPENGL_ES=ON'                                             || '' }}
        ${{ contains(matrix.config.name, 'Shared')                    && '-DBUILD_SHARED_LIBS=TRUE'                                        || '' }}
        ${{ contains(matrix.config.name, 'Static')                    && '-DBUILD_SHARED_LIBS=FALSE'                                       || '' }}
        ${{ contains(matrix.config.name, 'Static Standard Libraries') && '-DSFML_USE_STATIC_STD_LIBS=TRUE'                                 || '' }}
        ${{ contains(matrix.config.name, 'Frameworks')                && '-DSFML_BUILD_FRAMEWORKS=TRUE'                                    || '' }}
        ${{ contains(matrix.config.name, 'System Deps')               && '-DSFML_USE_SYSTEM_DEPS=TRUE'                                     || '' }}
        " >> $GITHUB_ENV

    - name: Configure CMake
      shell: bash
      run: cmake --preset dev ${{ env.CMAKE_ARGS }} > >(tee -a configure.out.log) 2> >(tee -a configure.err.log >&2)

    - name: Build
      shell: bash
      run: cmake --build build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} --target install -- ${{ (matrix.platform.generator == 'Ninja' || matrix.platform.generator == '') && '-k0' || '' }} > >(tee -a build.out.log) 2> >(tee -a build.err.log >&2)

    - name: Prepare Test
      shell: bash
      run: |
        set -e
        # Start up Xvfb and fluxbox to host display tests
        if [ "${{ runner.os }}" == "Linux" ]; then
          Xvfb $DISPLAY -screen 0 1920x1080x24 &
          sleep 5
          fluxbox > /dev/null 2>&1 &
          sleep 5
        fi
        # Make sure the build/bin directory exists so that the find command does not fail if no executables are built
        mkdir -p build/bin

    - name: Test
      uses: nick-fields/retry@v2
      with:
        max_attempts: 10
        timeout_minutes: 3
        retry_wait_seconds: 5
        warning_on_retry: false
        shell: bash
        command: |
          set -e
          if [ "${{ runner.os }}" == "Windows" ]; then
            # Make use of a test to print OpenGL vendor/renderer/version info to the console
            # We have to convert the backslashes in $GITHUB_WORKSPACE to (forward) slashes so bash doesn't try to escape them in the sh command
            find $(echo $GITHUB_WORKSPACE | sed 's/\\\\/\\//g')/build/bin -name test-sfml-window.exe -exec sh -c "{} *sf::Context* --section=\"Version String\" --success | grep OpenGL" \;
            # Run the tests
            cmake --build build --target runtests --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} > >(tee -a test.out.log) 2> >(tee -a test.err.log >&2)
            # Coverage is already generated on Windows when running tests.
          else
            # Make use of a test to print OpenGL vendor/renderer/version info to the console
            find build/bin -name test-sfml-window -exec sh -c "{} *sf::Context* --section=\"Version String\" --success | grep OpenGL" \;
            # Run the tests
            ctest --test-dir build --output-on-failure -C ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }} > >(tee -a test.out.log) 2> >(tee -a test.err.log >&2)
            # Run gcovr to extract coverage information from the test run
            if [ "${{ matrix.type.name }}" == "Debug" ]; then
              gcovr -r $GITHUB_WORKSPACE -x build/coverage.out -s -f 'src/SFML/.*' -f 'include/SFML/.*' ${{ matrix.platform.name == 'Linux Clang' && '--gcov-executable="llvm-cov-$CLANG_VERSION gcov"' || '' }} $GITHUB_WORKSPACE
            fi
          fi

    - name: Download Codecov Uploader
      if: matrix.type.name == 'Debug' && github.repository == 'SFML/SFML' # Disable upload in forks
      shell: bash
      run: |
        platform=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
        if [ "$platform" == "windows" ]; then CODECOV_BINARY="codecov.exe"; else CODECOV_BINARY="codecov"; fi
        curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
        curl -s --remote-name-all "https://uploader.codecov.io/latest/$platform/{$CODECOV_BINARY,$CODECOV_BINARY.SHA256SUM,$CODECOV_BINARY.SHA256SUM.sig}"
        if [ "$platform" == "windows" ]; then powershell 'If ($(Compare-Object -ReferenceObject $(($(certUtil -hashfile codecov.exe SHA256)[1], "codecov.exe") -join "  ") -DifferenceObject $(Get-Content codecov.exe.SHA256SUM)).length -eq 0) {echo "codecov: OK"} Else {exit 1}';
        else shasum -a 256 -c codecov.SHA256SUM; fi
        chmod +x "$CODECOV_BINARY"
        echo "CODECOV_BINARY=$CODECOV_BINARY" >> $GITHUB_ENV

    - name: Upload Coverage Report to Codecov
      if: matrix.type.name == 'Debug' && github.repository == 'SFML/SFML' # Disable upload in forks
      uses: nick-fields/retry@v2
      with:
        timeout_seconds: 30
        max_attempts: 10
        retry_wait_seconds: 60
        warning_on_retry: false
        shell: bash
        command: |
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_target" ]]; then COMMIT_OVERRIDE="-C ${{ github.event.pull_request.head.sha }}"; fi
          ./${{ env.CODECOV_BINARY }} -n "${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }}" -Z -f ./build/coverage.out $COMMIT_OVERRIDE -s ./build -e GITHUB_ACTION,GITHUB_RUN_ID,GITHUB_REF,GITHUB_REPOSITORY,GITHUB_SHA,GITHUB_HEAD_REF

    - name: Test Install Interface
      if: matrix.platform.name != 'Android'
      shell: bash
      run: |
        cmake -S test/install -B test/install/build -DSFML_ROOT=build/install ${{ env.CMAKE_ARGS }}
        cmake --build test/install/build --config ${{ matrix.type.name == 'Debug' && 'Debug' || 'Release' }}

    - name: Save Logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Log Files (${{ matrix.platform.name }} ${{ matrix.config.name }} ${{ matrix.type.name }})
        path: |
          configure.out.log
          configure.err.log
          build.out.log
          build.err.log
          test.out.log
          test.err.log

    - name: Generate Annotations
      if: always()
      shell: bash
      run: |
        touch build.out.log
        touch annotations.sh
        # Clang Warnings/Errors
        sed -nE 's/^(.*):([0-9]+):([0-9]+):\s+(warning|error):\s+(.*)$/echo "::\4 file=\1,line=\2,col=\3,title=compiler \4::\5"/p' build.out.log >> annotations.sh
        # GCC Warnings/Errors
        sed -nE 's/^(.*):([0-9]+):([0-9]+):\s*(fatal\s)?(warning|error):\s+(.*)$/echo "::\5 file=\1,line=\2,col=\3,title=compiler \5::\6"/p' build.out.log >> annotations.sh
        # MSVC Warnings/Errors
        sed -nE 's/^(.*)\(([0-9]+)\)\s*:\s*(fatal\s*)?(error|warning)\s+(.*)?([0-9]{4}):\s+(.*)$/echo "::\4 file=\1,line=\2,title=compiler \4::\7"/p' build.out.log >> annotations.sh
        # Remove MSVC hint and pipe unique lines to bash interpreter
        cat annotations.sh | { grep -v "the following warning is treated as an error" || true; } | sort -u | bash

  format:
    name: Formatting
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Dependencies
      uses: awalsh128/cache-apt-pkgs-action@15d0235a4147963374ec3a9334d73adf0cb9eabc
      with:
        packages: clang-format-14
        version: 1.0
        execute_install_scripts: true

    - name: Format Code
      run: cmake -DCLANG_FORMAT_EXECUTABLE=clang-format-14 -P cmake/Format.cmake

    - name: Check Formatting
      run: git diff --exit-code

  tidy:
    name: Analyzing on ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows,   os: windows-2022 }
        - { name: Linux,     os: ubuntu-22.04 }
        - { name: Linux DRM, os: ubuntu-22.04, flags: -DSFML_USE_DRM=TRUE }
        - { name: macOS,     os: macos-12 }
        - { name: iOS,       os: macos-12, flags: -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=arm64 }
        - { name: Android,   os: ubuntu-22.04, flags: -DCMAKE_ANDROID_ARCH_ABI=x86 -DCMAKE_SYSTEM_NAME=Android -DSFML_BUILD_TEST_SUITE=FALSE -DCMAKE_ANDROID_NDK=$GITHUB_WORKSPACE/android-ndk-r23b -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang -DCMAKE_ANDROID_STL_TYPE=c++_shared -DCMAKE_ANDROID_API=26 }

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Windows Dependencies
      if: runner.os == 'Windows'
      run: curl.exe -o run-clang-tidy https://raw.githubusercontent.com/llvm/llvm-project/llvmorg-15.0.7/clang-tools-extra/clang-tidy/tool/run-clang-tidy.py

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      uses: awalsh128/cache-apt-pkgs-action@15d0235a4147963374ec3a9334d73adf0cb9eabc
      with:
        packages: libxrandr-dev libxcursor-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libgl1-mesa-dev libegl1-mesa-dev libdrm-dev libgbm-dev
        version: 1.0
        execute_install_scripts: true

    - name: Install macOS Dependencies
      if: runner.os == 'macOS'
      run: |
        # Do not run updates until GitHub has fixed all the issues: https://github.com/orgs/Homebrew/discussions/4612
        # brew update
        brew install llvm || true
        echo /usr/local/opt/llvm/bin >> $GITHUB_PATH

    - name: Install Android Components
      if: matrix.platform.name == 'Android'
      run: |
        wget -nv https://dl.google.com/android/repository/android-ndk-r23b-linux.zip -P $GITHUB_WORKSPACE
        unzip -qq -d $GITHUB_WORKSPACE android-ndk-r23b-linux.zip

    - name: Configure
      shell: bash
      run: cmake --preset dev -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_UNITY_BUILD=ON ${{ matrix.platform.name == 'Windows' && '-GNinja' || '' }} ${{ matrix.platform.flags }}

    - name: Analyze Code
      shell: bash
      run: cmake --build build --target tidy
